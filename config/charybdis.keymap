#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

// Tap: repeat after alpha, else sticky-shift |
// Shift + tap/ double-tap: caps-word | Hold: shift.
#define MAGIC_SHIFT &magic_shift LSHFT 0
ZMK_HOLD_TAP(magic_shift, bindings = <&kp>, <&magic_shift_tap>;
             flavor = "balanced"; tapping-term-ms = <200>;
             quick-tap-ms = <QUICK_TAP_MS>;)
ZMK_MOD_MORPH(magic_shift_tap, bindings = <&shift_repeat>, <&caps_word>;
              mods = <(MOD_LSFT)>;)
ZMK_ADAPTIVE_KEY(
    shift_repeat, bindings = <&sk LSHFT>;
    repeat {
      trigger-keys = <A B C D E F G H I J K L M N O P Q R S T U V W X Y Z>;
      bindings = <&key_repeat>;
      max-prior-idle-ms = <1200>;
      strict-modifiers;
    };)

/ {
    trackball_listener {
        compatible = "zmk,input-listener";
        device = <&trackball_r_split>;
    };

    trackball_l_listener {
        compatible = "zmk,input-listener";
        device = <&trackball_l_split>;
    };

    behaviors {
        hl: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 25 15 33 34 26 16 17 28 18 27 29 19 8 9 7 6>;
        };

        hr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 22 21 11 2 1 12 13 3 4 14 24 30 23 31 32>;
        };

        insert_email: insert_email {
            compatible = "zmk,behavior-tap-dance";
            label = "INSERT_EMAIL";
            #binding-cells = <0>;
            bindings = <&kp AT_SIGN>, <&email>;
        };
    };

    macros {
        vs_def: vs_def {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp F12>;
            label = "VS_DEF";
        };

        vs_impl: vs_impl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp LC(F12)>;
            label = "VS_IMPL";
        };

        vs_refs: vs_refs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp LC(K) &kp R>;
            label = "VS_REFS";
        };

        email: email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp D &kp A &kp P &kp K &kp N2 &kp N0 &kp N0 &kp N3 &kp AT &kp G &kp M &kp A &kp I &kp L &kp DOT &kp C &kp O &kp M>;
            label = "EMAIL";
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03     04        05     06     07     08     09
    // ├──────┼──────┼──────┼──────┼──────┼  ├──────┼──────┼──────┼──────┼──────┤
    //    10     11     12     13     14        15     16     17     18     19
    // ├──────┼──────┼──────┼──────┼──────┼  ├──────┼──────┼──────┼──────┼──────┤
    //    20     21     22     23     24        25     26     27     28     29
    // ╰──────┴──────┴──────┼──────┼──────┤  ├──────┼──────┴──────┴──────┴──────╯
    //                  30     31     32        33     34     35
    //               ╰──────┴──────┴──────╯  ╰──────┴──────┴──────╯

    combos {
        compatible = "zmk,combos";

        copy {
            bindings = <&kp LC(C)>;
            key-positions = <22 23>;
        };

        paste {
            bindings = <&kp LC(V)>;
            key-positions = <23 24>;
        };

        cut {
            bindings = <&kp LC(X)>;
            key-positions = <21 22>;
        };

        undo {
            bindings = <&kp LC(Z)>;
            key-positions = <20 21>;
        };

        save {
            bindings = <&kp LC(S)>;
            key-positions = <11 12>;
            layers = <0>;
        };

        search {
            bindings = <&kp LC(LS(F))>;
            key-positions = <14 13 12>;
            layers = <0>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <15 25>;
        };

        dash {
            bindings = <&kp MINUS>;
            key-positions = <26 16>;
        };

        semicolon {
            bindings = <&kp SEMICOLON>;
            key-positions = <17 27>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <18 28>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <19 29>;
        };

        backspace {
            bindings = <&kp BSPC>;
            key-positions = <06 07>;
        };

        delete {
            bindings = <&kp DEL>;
            key-positions = <07 08>;
        };

        left-bracket {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <16 17>;
        };

        right-bracket {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <17 18>;
        };

        left-square {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <26 27>;
        };

        right-square {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <27 28>;
        };

        gaming-layer {
            bindings = <&tog 9>;
            key-positions = <0 1 2>;
            layers = <0 9>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &kp Q       &kp W           &kp E        &kp R        &kp T        &kp Y        &kp U            &kp I         &kp O       &kp P
  &hl LGUI A  &hl LEFT_ALT S  &hl LCTRL D  &hl LSHFT F  &kp G        &kp H        &hr RSHFT J      &hr RCTRL K   &hr RALT L  &hr RGUI SQT
  &lt 6 Z     &kp X           &kp C        &kp V        &kp B        &kp N        &kp M            &kp COMMA     &kp DOT     &lt 6 SLASH
                              &lt 6 ESC    &lt 4 SPACE  &lt 5 TAB    &lt 2 ENTER  &lt 1 BACKSPACE  &lt 3 MAGIC_SHIFT
            >;
        };

        Numbers {
            bindings = <
  &none      &kp NUMBER_7       &kp NUMBER_8  &kp NUMBER_9        &none            &none  &kp N7        &kp N8        &kp N9       &none
  &kp COLON  &hl LALT NUMBER_4  &hl LCTRL N5  &hl LSHFT NUMBER_6  &kp EQUAL        &none  &hr RSHFT N4  &hr RCTRL N5  &hr RALT N6  &kp RGUI
  &kp GRAVE  &kp NUMBER_1       &kp NUMBER_2  &kp NUMBER_3        &kp BACKSLASH    &none  &kp N1        &kp N2        &kp N3       &kp N0
                                &kp PERIOD    &kp NUMBER_0        &kp MINUS        &none  &trans        &none
            >;
        };

        Symbols {
            bindings = <
  &none          &kp AMPERSAND    &kp ASTERISK   &kp LEFT_PARENTHESIS  &none       &none  &none            &none              &none          &none
  &kp SEMICOLON  &kp DOLLAR       &kp PERCENT    &kp CARET             &kp PLUS    &none  &kp RIGHT_SHIFT  &kp RIGHT_CONTROL  &kp RIGHT_ALT  &kp RIGHT_GUI
  &kp TILDE      &kp EXCLAMATION  &insert_email  &kp HASH              &kp PIPE    &none  &none            &none              &none          &none
                                  &none          &trans                &none       &none  &none            &none
            >;
        };

        Functions {
            bindings = <
  &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &trans  &trans  &trans  &trans
  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans
  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        Navigation {
            bindings = <
  &none         &none         &none             &none           &none    &kp INSERT  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_CONTROL  &kp LEFT_SHIFT  &none    &caps_word  &kp LEFT        &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT
  &none         &none         &none             &none           &none    &none       &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END
                              &trans            &none           &none    &none       &none           &none
            >;
        };

        System {
            bindings = <
  &trans            &trans            &trans            &trans            &trans    &trans      &trans            &trans             &trans           &trans
  &kp LG(NUMBER_4)  &kp LG(NUMBER_3)  &kp LG(NUMBER_2)  &kp LG(NUMBER_1)  &trans    &trans      &kp C_PREVIOUS    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT
  &trans            &trans            &trans            &trans            &trans    &trans      &trans            &trans             &trans           &trans
                                      &trans            &trans            &trans    &kp C_STOP  &kp C_PLAY_PAUSE  &kp K_MUTE
            >;
        };

        Mouse {
            bindings = <
  &none   &none    &none     &none     &none       &none     &none     &none  &none  &none
  &none   &vs_def  &vs_impl  &vs_refs  &none       &none     &none     &none  &none  &none
  &trans  &mo 7    &mo 8     &none     &none       &none     &none     &none  &none  &trans
                   &mkp MB2  &mkp MB1  &mkp MB3    &mkp MB4  &mkp MB5  &none
            >;
        };

        Snipe {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &none
            >;
        };

        Drag {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &none
            >;
        };

        Gaming {
            bindings = <
  &kp T  &kp Q  &kp W           &kp E      &kp R      &kp Y       &kp U      &kp I         &kp O       &kp P
  &kp G  &kp A  &kp S           &kp D      &kp F      &kp H       &kp J      &kp K         &kp L       &kp SEMI
  &kp B  &kp Z  &kp X           &kp C      &kp V      &kp N       &kp M      &kp COMMA     &kp PERIOD  &kp SLASH
                &kp LEFT_SHIFT  &kp SPACE  &kp TAB    &kp ESCAPE  &kp LCTRL  &kp LEFT_ALT
            >;
        };
    };
};